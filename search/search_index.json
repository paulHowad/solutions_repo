{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Theoretical Foundation Deriving the Governing Equations of Motion: To analyze projectile motion, we start with the basic principles of kinematics. We consider a projectile launched with an initial velocity ( v_0 ) at an angle ( \\theta ) above the horizontal. The motion can be decomposed into horizontal and vertical components. Horizontal Motion: The horizontal component of the initial velocity is given by: [ v_{0x} = v_0 \\cos(\\theta) ] The horizontal position ( x ) as a function of time ( t ) is: [ x(t) = v_{0x} t = v_0 \\cos(\\theta) t ] Vertical Motion: The vertical component of the initial velocity is: [ v_{0y} = v_0 \\sin(\\theta) ] The vertical position ( y ) as a function of time ( t ) is governed by the equation: [ y(t) = v_{0y} t - \\frac{1}{2} g t^2 = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 ] where ( g ) is the acceleration due to gravity. Solving the Equations: To find the time of flight ( T ), we set ( y(T) = 0 ) (assuming the projectile lands at the same height from which it was launched): [ 0 = v_0 \\sin(\\theta) T - \\frac{1}{2} g T^2 ] Factoring out ( T ): [ T \\left( v_0 \\sin(\\theta) - \\frac{1}{2} g T \\right) = 0 ] This gives us two solutions: ( T = 0 ) (the launch time) and: [ T = \\frac{2 v_0 \\sin(\\theta)}{g} ] Finding the Range: The horizontal range ( R ) is given by the horizontal distance traveled during the time of flight: \\R = x(T) = v_0 \\cos(\\theta) T = v_0 \\cos(\\theta) \\left( \\frac{2 v_0 \\sin(\\theta)}{g} \\right) \\This simplifies to: [ R = \\frac{v_0^2sin(2\\theta)}{g} ] Family of Solutions: The range ( R ) depends on the angle ( \\theta ) and the initial velocity ( v_0 ). By varying ( v_0 ) and ( \\theta ), we can generate a family of trajectories, illustrating how different initial conditions lead to different ranges. Analysis of the Range Dependence on Angle of Projection: The range ( R ) is maximized when ( \\sin(2\\theta) ) is maximized. The maximum value of ( \\sin(2\\theta) ) is 1, which occurs at ( \\theta = 45^\\circ ). Thus, for a given initial velocity, the optimal angle for maximum range is ( 45^\\circ ). Influence of Other Parameters: Initial Velocity ( v_0 ): The range increases with the square of the initial velocity. Doubling the initial velocity results in afold increase in range. Gravitational Acceleration ( g ): The range is inversely proportional to ( g ). A lower gravitational acceleration (as on the Moon) results in a longer range for the same initial velocity and angle. 3. Practical Applications Adapting the Model: Uneven Terrain: The equations can be modified to account for varying launch and landing heights. The time of flight and range would need to be recalculated based on the height difference. Air Resistance: The simple model assumes no air resistance. To include drag, we would need to solve a more complex set of differential equations, typically requiring numerical methods. Real-World Examples: Sports (e.g., soccer, basketball) where the angle of kick or throw significantly affects the distance. Engineering applications in ballistics and projectile design. 4. Implementation Computational Tool: To simulate projectile motion, we can create a Python script using libraries like NumPy and Matplotlib. Below is a simple implementation: python import numpy as np import matplotlib.pyplot as plt def projectile_motion(v0, theta, g=9.81): theta_rad = np.radians(theta) T = (2 * v0 * np.sin(theta_rad)) / g # Time of flight t = np.linspace(0, T, num=500) # Time array # Calculate x and y positions x = v0 * np.cos(theta_rad) * t y = v0 * np.sin(theta_rad) * t - 0.5 * g * t**2 return x, y Parameters v0 = 50 # Initial velocity in m/s angles = [15, 30, 45, 60, 75] # Angles in degrees plt.figure(figsize=(10, 6)) for angle in angles: x, y = projectile_motion(v0, angle) plt.plot(x, y, label=f'\u03b8 = {angle}\u00b0') plt.title('Projectile Motion: Range vs. Angle of Projection') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.axhline(0, color='black', lw=0.5, ls='--') plt.axvline(0, color='black', lw=0.5, ls='--') plt.grid() plt.legend() plt.xlim(0, 200) plt.ylim(0, 50) plt.show() Visualization: This script will generate a plot showing the trajectories of projectiles launched at different angles with the same initial velocity. The resulting graph will illustrate how the angle of projection affects the range and height of the projectile, providing a visual understanding of the underlying physics. Regenerate","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"Theoretical Foundation Deriving the Governing Equations of Motion: To analyze projectile motion, we start with the basic principles of kinematics. We consider a projectile launched with an initial velocity ( v_0 ) at an angle ( \\theta ) above the horizontal. The motion can be decomposed into horizontal and vertical components. Horizontal Motion: The horizontal component of the initial velocity is given by: [ v_{0x} = v_0 \\cos(\\theta) ] The horizontal position ( x ) as a function of time ( t ) is: [ x(t) = v_{0x} t = v_0 \\cos(\\theta) t ] Vertical Motion: The vertical component of the initial velocity is: [ v_{0y} = v_0 \\sin(\\theta) ] The vertical position ( y ) as a function of time ( t ) is governed by the equation: [ y(t) = v_{0y} t - \\frac{1}{2} g t^2 = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 ] where ( g ) is the acceleration due to gravity. Solving the Equations: To find the time of flight ( T ), we set ( y(T) = 0 ) (assuming the projectile lands at the same height from which it was launched): [ 0 = v_0 \\sin(\\theta) T - \\frac{1}{2} g T^2 ] Factoring out ( T ): [ T \\left( v_0 \\sin(\\theta) - \\frac{1}{2} g T \\right) = 0 ] This gives us two solutions: ( T = 0 ) (the launch time) and: [ T = \\frac{2 v_0 \\sin(\\theta)}{g} ] Finding the Range: The horizontal range ( R ) is given by the horizontal distance traveled during the time of flight: \\R = x(T) = v_0 \\cos(\\theta) T = v_0 \\cos(\\theta) \\left( \\frac{2 v_0 \\sin(\\theta)}{g} \\right) \\This simplifies to: [ R = \\frac{v_0^2sin(2\\theta)}{g} ] Family of Solutions: The range ( R ) depends on the angle ( \\theta ) and the initial velocity ( v_0 ). By varying ( v_0 ) and ( \\theta ), we can generate a family of trajectories, illustrating how different initial conditions lead to different ranges. Analysis of the Range Dependence on Angle of Projection: The range ( R ) is maximized when ( \\sin(2\\theta) ) is maximized. The maximum value of ( \\sin(2\\theta) ) is 1, which occurs at ( \\theta = 45^\\circ ). Thus, for a given initial velocity, the optimal angle for maximum range is ( 45^\\circ ). Influence of Other Parameters: Initial Velocity ( v_0 ): The range increases with the square of the initial velocity. Doubling the initial velocity results in afold increase in range. Gravitational Acceleration ( g ): The range is inversely proportional to ( g ). A lower gravitational acceleration (as on the Moon) results in a longer range for the same initial velocity and angle. 3. Practical Applications Adapting the Model: Uneven Terrain: The equations can be modified to account for varying launch and landing heights. The time of flight and range would need to be recalculated based on the height difference. Air Resistance: The simple model assumes no air resistance. To include drag, we would need to solve a more complex set of differential equations, typically requiring numerical methods. Real-World Examples: Sports (e.g., soccer, basketball) where the angle of kick or throw significantly affects the distance. Engineering applications in ballistics and projectile design. 4. Implementation Computational Tool: To simulate projectile motion, we can create a Python script using libraries like NumPy and Matplotlib. Below is a simple implementation: python import numpy as np import matplotlib.pyplot as plt def projectile_motion(v0, theta, g=9.81): theta_rad = np.radians(theta) T = (2 * v0 * np.sin(theta_rad)) / g # Time of flight t = np.linspace(0, T, num=500) # Time array # Calculate x and y positions x = v0 * np.cos(theta_rad) * t y = v0 * np.sin(theta_rad) * t - 0.5 * g * t**2 return x, y","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#parameters","text":"v0 = 50 # Initial velocity in m/s angles = [15, 30, 45, 60, 75] # Angles in degrees plt.figure(figsize=(10, 6)) for angle in angles: x, y = projectile_motion(v0, angle) plt.plot(x, y, label=f'\u03b8 = {angle}\u00b0') plt.title('Projectile Motion: Range vs. Angle of Projection') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.axhline(0, color='black', lw=0.5, ls='--') plt.axvline(0, color='black', lw=0.5, ls='--') plt.grid() plt.legend() plt.xlim(0, 200) plt.ylim(0, 50) plt.show() Visualization: This script will generate a plot showing the trajectories of projectiles launched at different angles with the same initial velocity. The resulting graph will illustrate how the angle of projection affects the range and height of the projectile, providing a visual understanding of the underlying physics. Regenerate","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}